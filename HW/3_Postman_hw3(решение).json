{
	"info": {
		"_postman_id": "cf282bee-894a-4c9e-9486-7c1d51636345",
		"name": "Вадим.Ксендзов_QA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0_POST_ep: /login",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{ksendzov}}/login?login=Egor&password =asdfdsafasdf",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "Egor"
						},
						{
							"key": "password ",
							"value": "asdfdsafasdf"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "1_GET_ep : /get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ksendzov}}/get_method?name=Alice&age=6",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Alice"
						},
						{
							"key": "age",
							"value": "6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2_POST_ep : /user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('2. Статус код 200', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"\"3. Спарсить response body в json\"\r",
							"var jsonData = pm.response.json() \r",
							"var name = jsonData.name, age = +jsonData.age, salary = +jsonData.salary\r",
							"console.log(name, age, salary)\r",
							"\r",
							"pm.test(\"4. Проверить, что name в ответе равно name s request (name вбить руками.)\", () => {\r",
							"    pm.expect(name).to.eql(\"Alena\")\r",
							"})\r",
							"\r",
							"pm.test(\"5. Проверить, что age в ответе равно age s request (age вбить руками.)\", () => {\r",
							"    pm.expect(age).to.eql(29)\r",
							"})\r",
							"\r",
							"pm.test(\"6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\", () => {\r",
							"    pm.expect(salary).to.eql(30000)\r",
							"})\r",
							"\r",
							"// pm.test(\"Сверка параметров в response (4,5,6)\", () => {\r",
							"//     pm.expect(name).to.eql(\"Alena\")\r",
							"//     pm.expect(age).to.eql(29)\r",
							"//     pm.expect(salary).to.eql(30000);\r",
							"// })\r",
							"\r",
							"\"7. Спарсить request.\"\r",
							"var reqjsdata = request.data\r",
							"var reqName = reqjsdata.name, reqAge = +reqjsdata.age, reqSalary = +reqjsdata.salary\r",
							"\r",
							"pm.test(\"8. Проверить, что name в ответе равно name s request (name забрать из request.)\", () => {\r",
							"     pm.expect(name).to.eql(reqName)\r",
							"})\r",
							"\r",
							"pm.test(\"9. Проверить, что age в ответе равно age s request (age забрать из request.)\", () => {\r",
							"    pm.expect(age).to.eql(reqAge)\r",
							"})\r",
							"\r",
							"pm.test(\"10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\", () => {\r",
							"    pm.expect(salary).to.eql(reqSalary)\r",
							"})\r",
							"\r",
							"// pm.test(\"Сверка параметров в response с параметрами в request (8, 9, 10)\", () => {\r",
							"//     pm.expect(name).to.eql(reqName)\r",
							"//     pm.expect(age).to.eql(reqAge)\r",
							"//     pm.expect(salary).to.eql(reqSalary)\r",
							"// })\r",
							"\r",
							"\"11. Вывести в консоль параметр family из response.\"\r",
							"let family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"pm.test(\"12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\", () =>{\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqSalary*4);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "29",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "30000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{ksendzov}}/user_info_3",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3_GET_ep : /object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ksendzov}}/object_info_1?name=Egor&age=29&weight=95",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Egor"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "weight",
							"value": "95"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4_GET_ep : /object_info_2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ksendzov}}/object_info_2?name=Egor&age=29&salary=70000",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Egor"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "70000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5_GET_ep : /object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2. Статус код 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"\"3. Спарсить response body в json.\"\r",
							"var jsonRESP = pm.response.json()\r",
							"console.log(jsonRESP)\r",
							"\r",
							"\"4. Спарсить request.\"\r",
							"let jsonREQ = pm.request.url.query.toObject()\r",
							"console.log(jsonREQ)\r",
							"\r",
							"pm.test(\"5. Проверить, что name в ответе равно name s request (name забрать из request.)\", () => {\r",
							"    pm.expect(jsonRESP.name).to.eql(jsonREQ.name)\r",
							"})\r",
							"\r",
							"pm.test(\"6. Проверить, что age в ответе равно age s request (age забрать из request.)\", () => {\r",
							"    pm.expect(jsonRESP.age).to.eql(jsonREQ.age)\r",
							"})\r",
							"\r",
							"pm.test(\"7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\", () => {\r",
							"    pm.expect(jsonRESP.salary).to.eql(+(jsonREQ.salary))\r",
							"})\r",
							"\r",
							"// pm.test(\"Сверка параметров  в response с параметрами в request (5, 6, 7)\", () => {\r",
							"//     pm.expect(jsonRESP.name).to.eql(jsonREQ.name)\r",
							"//     pm.expect(jsonRESP.age).to.eql(jsonREQ.age)\r",
							"//     pm.expect(jsonRESP.salary).to.eql(+(jsonREQ.salary));\r",
							"// })\r",
							"\r",
							"\"8. Вывести в консоль параметр family из response.\"\r",
							"console.log(jsonRESP.family)\r",
							"\r",
							"pm.test(\"9. Проверить, что у параметра dog есть параметры name.\", () => {\r",
							"    pm.expect(jsonRESP.family.pets.dog).to.have.property(\"name\")\r",
							"})\r",
							"\r",
							"pm.test(\"10. Проверить, что у параметра dog есть параметры age.\", () => {\r",
							"    pm.expect(jsonRESP.family.pets.dog).to.have.property(\"age\");\r",
							"})\r",
							"\r",
							"// pm.test(\"Собака имеет возраст и год =) (9, 10)\", () =>{\r",
							"//     pm.expect(jsonRESP.family.pets.dog).to.have.property(\"name\")\r",
							"//     pm.expect(jsonRESP.family.pets.dog).to.have.property(\"age\");\r",
							"// })\r",
							"\r",
							"pm.test(\"11. Проверить, что параметр name имеет значение Luky.\", () => {\r",
							"    pm.expect(jsonRESP.family.pets.dog.name).to.eql(\"Luky\")\r",
							"})\r",
							"\r",
							"pm.test(\"12. Проверить, что параметр age имеет значение 4.\", () => {\r",
							"    pm.expect(jsonRESP.family.pets.dog.age).to.eql(4);\r",
							"})\r",
							"\r",
							"// pm.test (\"Сверка параметров ответа с образцом (11, 12)\", () => {\r",
							"//     pm.expect(jsonRESP.family.pets.dog.name).to.eql(\"Luky\")\r",
							"//     pm.expect(jsonRESP.family.pets.dog.age).to.eql(4);\r",
							"// })\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ksendzov}}/object_info_3?name=Nikolai&age=10&salary=1",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikolai"
						},
						{
							"key": "age",
							"value": "10"
						},
						{
							"key": "salary",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "6_GET_ep : /object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2. Статус код 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"'3. Спарсить response body в json.'\r",
							"RESP = pm.response.json()\r",
							"console.log(\"ответ = \" , RESP)\r",
							"\r",
							"'4. Спарсить request.'\r",
							"REQ = pm.request.url.query.toObject()\r",
							"console.log(\"запрос = \", REQ)\r",
							"\r",
							"pm.test(\"5. Проверить, что name в ответе равно name s request (name забрать из request.)\", () => {\r",
							"     pm.expect(RESP.name).to.eql(REQ.name)\r",
							"})\r",
							"\r",
							"pm.test(\"6. Проверить, что age в ответе равно age из request (age забрать из request.)\", () => {\r",
							"    pm.expect(RESP.age).to.eql(+(REQ.age)) //переводим данные в валидный тип для сравнения\r",
							"})\r",
							"\r",
							"// pm.test('Сверка параметров ответа с параметрами запроса', () => {\r",
							"//     pm.expect(RESP.name).to.eql(REQ.name)\r",
							"//     pm.expect(RESP.age).to.eql(+(REQ.age))\r",
							"// })\r",
							"\r",
							"'7. Вывести в консоль параметр salary из request.'\r",
							"console.log(REQ.salary)\r",
							"\r",
							"'8. Вывести в консоль параметр salary из response.'\r",
							"console.log(RESP.salary)\r",
							"\r",
							"'9. Вывести в консоль 0-й элемент параметра salary из response.'\r",
							"console.log(RESP.salary[0])\r",
							"\r",
							"'10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.'\r",
							"console.log(RESP.salary[1])\r",
							"\r",
							"'11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.'\r",
							"console.log(RESP.salary[2])\r",
							"\r",
							"pm.test('12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)', () => {\r",
							"    pm.expect(RESP.salary[0]).to.eql(+(REQ.salary))  //переводим данные в валидный тип для сравнения\r",
							"})\r",
							"pm.test(\"13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\", () => {\r",
							"    pm.expect(+(RESP.salary[1])).to.eql(+(REQ.salary)*2)  //переводим данные в валидный тип для сравнения\r",
							"})\r",
							"pm.test(\"14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\", () => {\r",
							"    pm.expect(+(RESP.salary[2])).to.eql(+(REQ.salary)*3)  //переводим данные в валидный тип для сравнения\r",
							"})\r",
							"\r",
							"'18. Передать в окружение переменную name'\r",
							"'19. Передать в окружение переменную age'\r",
							"'20. Передать в окружение переменную salary'\r",
							"pm.environment.set(\"name\", \"Egor\")\r",
							"pm.environment.set(\"age\",\"29\")\r",
							"pm.environment.set(\"salary\", \"100000\")\r",
							"\r",
							"'21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.'\r",
							"let cikl = RESP.salary\r",
							"for (let i = 0; i < cikl.lenght; i++) {\r",
							"    console.log(cikl[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ksendzov}}/object_info_4?name=Sergey&age=51&salary=60000",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Sergey"
						},
						{
							"key": "age",
							"value": "51"
						},
						{
							"key": "salary",
							"value": "60000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "7_POST_ep : /user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('5. Статус код 200', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"'6. Спарсить response body в json.'\r",
							"RESP = pm.response.json()\r",
							"console.log(\"otvet = \", RESP)\r",
							"\r",
							"'7. Спарсить request.'\r",
							"REQ = request.data\r",
							"console.log(\"zapros = \", REQ)\r",
							"\r",
							"pm.test('8. Проверить, что json response имеет параметр start_qa_salary', () => {\r",
							"    pm.expect(RESP).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"\r",
							"pm.test('9. Проверить, что json response имеет параметр qa_salary_after_6_months', () => {\r",
							"    pm.expect(RESP).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"pm.test('10. Проверить, что json response имеет параметр qa_salary_after_12_months', () => {\r",
							"    pm.expect(RESP).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"pm.test('11. Проверить, что json response имеет параметр qa_salary_after_1.5_year', () => {\r",
							"    pm.expect(RESP).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"pm.test('12. Проверить, что json response имеет параметр qa_salary_after_3.5_years', () => {\r",
							"    pm.expect(RESP).to.have.property('qa_salary_after_3.5_years')\r",
							"})\r",
							"\r",
							"pm.test('13. Проверить, что json response имеет параметр person', () => {\r",
							"    pm.expect(RESP).to.have.property('person')\r",
							"})\r",
							"\r",
							"pm.test('14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)', () => {\r",
							"    pm.expect(RESP.start_qa_salary).to.eql(+(REQ.salary))\r",
							"})\r",
							"\r",
							"pm.test(\"15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\", () => {\r",
							"    pm.expect(RESP.qa_salary_after_6_months).to.eql(+(REQ.salary)*2)\r",
							"})\r",
							"\r",
							"pm.test('16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)', () => {\r",
							"    pm.expect(RESP.qa_salary_after_12_months).to.eql(+(REQ.salary)*2.7)\r",
							"})\r",
							"\r",
							"pm.test('17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)', () => {\r",
							"    pm.expect(RESP[\"qa_salary_after_1.5_year\"]).to.eql(+(REQ.salary)*3.3)\r",
							"})\r",
							"\r",
							"pm.test('18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)', () => {\r",
							"    pm.expect(RESP[\"qa_salary_after_3.5_years\"]).to.eql(+(REQ.salary)*3.8)\r",
							"})\r",
							"\r",
							"pm.test('19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)', () => {\r",
							"    pm.expect(RESP.person.u_name[1]).to.eql(+REQ.salary)\r",
							"})\r",
							"\r",
							"pm.test('20. Проверить, что что параметр u_age равен age из request (age забрать из request.)', () => {\r",
							"    pm.expect(String(RESP.person.u_age)).to.eql(REQ.age) \r",
							"})\r",
							"\r",
							"pm.test('21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)', () => {\r",
							"    pm.expect(RESP.person.u_salary_5_years).to.eql(+(REQ.salary)*4.2)\r",
							"})\r",
							"\r",
							"'22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.'\r",
							"let cikl_persona = RESP.person\r",
							"for (let key in cikl_persona) {\r",
							"    console.log(key , cikl_persona[key])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{ksendzov}}/user_info_2",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "8_GET_ep: /first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2. Статус код 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"let right_resp = \"This is the first responce from server!\";\r",
							"\r",
							"console.log(right_resp)\r",
							"\r",
							"pm.test('3. Проверить, что в body приходит правильный string.', () => {\r",
							"    pm.expect(pm.response.text()).to.eql(right_resp);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ksendzov}}/first",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "9_POST_ep: /user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"1. Статус код 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"\"2. Проверка структуры json в ответе.\"\r",
							"var schema = { //сохраняем схему\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"// pm.test(\"VAlid json\", () => {\r",
							"//     pm.response.to.have.jsonSchema(schema)\r",
							"// })\r",
							"\r",
							"// pm.test(\"valid 2\", () => {\r",
							"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
							"// })\r",
							"\r",
							"pm.test(\"2. Проверка структуры json в ответе.\", () => {\r",
							"    const result = tv4.validateMultiple(pm.response.json(), schema);\r",
							"\r",
							"    if(!result.valid) result.errors.forEach(error => \r",
							"    console.log(`ошибка : ${error.message}, в ${error.schemaPath}`))\r",
							"\r",
							"    pm.expect(result.valid).to.be.true\r",
							"})\r",
							"\r",
							"\r",
							"'3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.'\r",
							"pm.test(\"Логика qa_salary_after_6_months\", () => {\r",
							"    pm.expect(pm.response.json().qa_salary_after_6_months).to.eql((JSON.parse(pm.request.body).salary)*2)\r",
							"})\r",
							"//выведем перемену, много тестов связано с ней\r",
							"salary = JSON.parse(pm.request.body).salary\r",
							"console.log(typeof(salary))\r",
							"pm.test(\"Логика qa_salary_after_12_months\", () => {\r",
							"    pm.expect(pm.response.json().qa_salary_after_12_months).to.eql(salary*2.9)\r",
							"})\r",
							"pm.test(\"Логика u_salary_1_5_year\", () => {\r",
							"    pm.expect(pm.response.json().person.u_salary_1_5_year).to.eql((JSON.parse(pm.request.body).salary)*4)\r",
							"})\r",
							"\r",
							"'4) Достать значение из поля u_salary_1.5_year и передать в поле salary запроса http://162.55.220.72:5005/get_test_user'\r",
							"pm.environment.set(\"salary\", pm.response.json().person.u_salary_1_5_year)\r",
							"\r",
							"console.log(pm.response.json().person.u_salary_1_5_year)\r",
							"console.log(typeof(pm.response.json().person.u_salary_1_5_year))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 29,\r\n    \"salary\": 90000,\r\n    \"name\": \"Egor\",\r\n    \"auth_token\": {{token}} \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ksendzov}}/user_info",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "10_POST_ep: /new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"1. Статус код 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"\"2. Проверка структуры json в ответе.\"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"2. Проверка структуры json в ответе.\", () => {\r",
							"    const result = tv4.validateMultiple(pm.response.json(), schema);\r",
							"\r",
							"    if(!result.valid) result.errors.forEach(error =>\r",
							"    console.log(`Ошибка : ${error.message} в ${error.schemaPath}`));\r",
							"\r",
							"    pm.expect(result.valid).to.be.true; \r",
							"})\r",
							"\r",
							"\r",
							"'3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.'\r",
							"pm.test(\"Логика salary[1]\", () => {\r",
							"    pm.expect(+pm.response.json().salary[1]).to.eql(request.data.salary*2)\r",
							"})\r",
							"pm.test(\"Логика salary[2]\", () => {\r",
							"    pm.expect(+pm.response.json().salary[2]).to.eql(request.data.salary*3)\r",
							"})\r",
							"\r",
							"pm.test(\"4. проверить, что 2-й элемент массива salary больше 1-го и 0-го\", () => {\r",
							"    pm.expect(+pm.response.json().salary[2] > pm.response.json().salary[0] && +pm.response.json().salary[2] > pm.response.json().salary[1]).to.be.true\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Egor",
							"type": "text"
						},
						{
							"key": "age",
							"value": "121",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ksendzov}}/new_data",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "11_POST_ep: /test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('1. Статус код 200', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"2. Проверка структуры json в ответе.\", () => {\r",
							"    const result = tv4.validateMultiple(pm.response.json(), schema)\r",
							"\r",
							"    if(!result.valid) result.errors.forEach(error =>\r",
							"    console.log(`ошибка : ${error.message} в ${error.schemaPath}`))\r",
							"\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"})\r",
							"\r",
							"'В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.'\r",
							"pm.test(\"Логика daily_food\", () =>{\r",
							"    pm.expect(pm.response.json().daily_food).to.eql(request.data.weight*0.012)\r",
							"})\r",
							"pm.test(\"Логика daily_sleep\", () => {\r",
							"    pm.expect(pm.response.json().daily_sleep).to.eql(request.data.weight*2.5)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "55",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "-878",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Egor",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ksendzov}}/test_pet_info",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "12_POST_ep: /get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"1. Статус код 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"'2. Проверка структуры json в ответе.'\r",
							"schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('2. Проверка структуры json в ответе.', () => {\r",
							"    const res = tv4.validateMultiple(pm.response.json(), schema)\r",
							"\r",
							"    if(!res.valid) res.errors.forEach(error =>\r",
							"    console.log(`ошибка - ${error.message} в ${error.schemaPath}`))\r",
							"\r",
							"    pm.expect(res.valid).to.be.true\r",
							"})\r",
							"\r",
							"pm.test('3. Проверить что занчение поля name = значению переменной name из окружения', () => {\r",
							"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"))\r",
							"})\r",
							"\r",
							"pm.test(\"4. Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\", () => {\r",
							"    pm.expect(pm.response.json().age).to.eql(request.data.age)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Egor",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ksendzov}}/get_test_user",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "13_POST_ep: /currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\"1.взять любой объект из присланного списка, используйте js random\"\r",
							"let list = pm.response.json()\r",
							"var obj = list[Math.floor(Math.random()*list.length)]\r",
							"console.log(obj)\r",
							"\r",
							"// '2.В объекте возьмите Cur_ID и передать через окружение в следующий запрос.'\r",
							"// pm.environment.set(\"Cur_ID\", obj.Cur_ID)\r",
							"\r",
							"// var response = pm.response.json()\r",
							"// for (let i = 0; i < response.length; i++) {\r",
							"//     var ID = response[i].Cur_ID;\r",
							"// const options = {\r",
							"//     'method': 'POST',\r",
							"//     'url': 'http://162.55.220.72:5005/curr_byn',\r",
							"//     'body': {\r",
							"//             'mode': 'formdata',\r",
							"//             'formdata': [\r",
							"//                 {'key':'auth_token', 'value':'\"/s34lfgbj/None/jjd909/17636kjkWpqc3818None406533evny\"'},\r",
							"//                 {'key':'curr_code', 'value':ID}\r",
							"//             ]\r",
							"//     }\r",
							"// }\r",
							"// pm.sendRequest(options, (error, response) => {\r",
							"//     if (error) console.log(--silent);\r",
							"//     console.log(response.json());\r",
							"// });\r",
							"// }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ksendzov}}/currency",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "14_POST_ep: /curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"1.Статус код 200\", () =>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"\"2. Проверка структуры json в ответе.\"\r",
							"schema = { \r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"2. Проверка структуры json в ответе.\", () => {\r",
							"    const res = tv4.validateMultiple(pm.response.json(), schema);\r",
							"\r",
							"    if(!res.valid) res.errors.forEach(error =>\r",
							"    console.log(`ошибка - ${error.message} в ${error.schemaPath}`));\r",
							"\r",
							"    pm.expect(res.valid).to.be.true\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ksendzov}}/curr_byn",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"// pm.test(`${request.name} - schema is valid`",
					"",
					"// var item = items[Math.floor(Math.random()*items.length)];"
				]
			}
		}
	]
}