{
	"info": {
		"_postman_id": "cf282bee-894a-4c9e-9486-7c1d51636345",
		"name": "Вадим.Ксендзов_QA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1_GET_ep : /get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ksendzov}}/get_method?name=Alice&age=6",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Alice"
						},
						{
							"key": "age",
							"value": "6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2_POST_ep : /user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\"3. Спарсить response body в json\"\r",
							"var jsonData = pm.response.json() \r",
							"var name = jsonData.name, age = +jsonData.age, salary = +jsonData.salary\r",
							"console.log(name, age, salary)\r",
							"\r",
							"\"4. Проверить, что name в ответе равно name s request (name вбить руками.)\"\r",
							"\"5. Проверить, что age в ответе равно age s request (age вбить руками.)\"\r",
							"\"6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\"\r",
							"\r",
							"pm.test(\"Сверка параметров в response (4,5,6)\", () => {\r",
							"    pm.expect(name).to.eql(\"Alena\")\r",
							"    pm.expect(age).to.eql(29)\r",
							"    pm.expect(salary).to.eql(30000);\r",
							"})\r",
							"\r",
							"\"7. Спарсить request.\"\r",
							"var reqjsdata = request.data\r",
							"var reqName = reqjsdata.name, reqAge = +reqjsdata.age, reqSalary = +reqjsdata.salary\r",
							"\r",
							"\"8. Проверить, что name в ответе равно name s request (name забрать из request.)\"\r",
							"\"9. Проверить, что age в ответе равно age s request (age забрать из request.)\"\r",
							"\"10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\"\r",
							"\r",
							"pm.test(\"Сверка параметров в response с параметрами в request (8, 9, 10)\", () => {\r",
							"    pm.expect(name).to.eql(reqName)\r",
							"    pm.expect(age).to.eql(reqAge)\r",
							"    pm.expect(salary).to.eql(reqSalary)\r",
							"})\r",
							"\r",
							"\"11. Вывести в консоль параметр family из response.\"\r",
							"let family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"\"12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\"\r",
							"pm.test(\"Проверка зарплаты\", () =>{\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqSalary*4);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "29",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "30000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{ksendzov}}/user_info_3",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3_GET_ep : /object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ksendzov}}/object_info_1?name=Egor&age=29&weight=95",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Egor"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "weight",
							"value": "95"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4_GET_ep : /object_info_2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ksendzov}}/object_info_2?name=Egor&age=29&salary=70000",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Egor"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "70000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5_GET_ep : /object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\"3. Спарсить response body в json.\"\r",
							"var jsonRESP = pm.response.json()\r",
							"console.log(jsonRESP)\r",
							"\r",
							"\"4. Спарсить request.\"\r",
							"let jsonREQ = pm.request.url.query.toObject()\r",
							"console.log(jsonREQ)\r",
							"\r",
							"\"5. Проверить, что name в ответе равно name s request (name забрать из request.)\"\r",
							"\"6. Проверить, что age в ответе равно age s request (age забрать из request.)\"\r",
							"\"7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\"\r",
							"\r",
							"pm.test(\"Сверка параметров  в response с параметрами в request (5, 6, 7)\", () => {\r",
							"    pm.expect(jsonRESP.name).to.eql(jsonREQ.name)\r",
							"    pm.expect(jsonRESP.age).to.eql(jsonREQ.age)\r",
							"    pm.expect(jsonRESP.salary).to.eql(+(jsonREQ.salary));\r",
							"})\r",
							"\r",
							"\"8. Вывести в консоль параметр family из response.\"\r",
							"console.log(jsonRESP.family)\r",
							"\r",
							"\"9. Проверить, что у параметра dog есть параметры name.\"\r",
							"\"10. Проверить, что у параметра dog есть параметры age.\"\r",
							"pm.test(\"Собака имеет возраст и год =) (9, 10)\", () =>{\r",
							"    pm.expect(jsonRESP.family.pets.dog).to.have.property(\"name\")\r",
							"    pm.expect(jsonRESP.family.pets.dog).to.have.property(\"age\");\r",
							"})\r",
							"\r",
							"\r",
							"\"11. Проверить, что параметр name имеет значение Luky.\"\r",
							"\"12. Проверить, что параметр age имеет значение 4.\"\r",
							"pm.test (\"Сверка параметров ответа с образцом (11, 12)\", () => {\r",
							"    pm.expect(jsonRESP.family.pets.dog.name).to.eql(\"Luky\")\r",
							"    pm.expect(jsonRESP.family.pets.dog.age).to.eql(4);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ksendzov}}/object_info_3?name=Nikolai&age=10&salary=1",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikolai"
						},
						{
							"key": "age",
							"value": "10"
						},
						{
							"key": "salary",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "6_GET_ep : /object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"'3. Спарсить response body в json.'\r",
							"RESP = pm.response.json()\r",
							"console.log(\"ответ = \" , RESP)\r",
							"\r",
							"'4. Спарсить request.'\r",
							"REQ = pm.request.url.query.toObject()\r",
							"console.log(\"запрос = \", REQ)\r",
							"\r",
							"'5. Проверить, что name в ответе равно name s request (name забрать из request.)'\r",
							"'6. Проверить, что age в ответе равно age из request (age забрать из request.)'\r",
							"//переводим данные в валиный тип для сравнения\r",
							"\r",
							"pm.test('Сверка параметров ответа с параметрами запроса', () => {\r",
							"    pm.expect(RESP.name).to.eql(REQ.name)\r",
							"    pm.expect(RESP.age).to.eql(+(REQ.age))\r",
							"})\r",
							"\r",
							"'7. Вывести в консоль параметр salary из request.'\r",
							"console.log(REQ.salary)\r",
							"\r",
							"'8. Вывести в консоль параметр salary из response.'\r",
							"console.log(RESP.salary)\r",
							"\r",
							"'9. Вывести в консоль 0-й элемент параметра salary из response.'\r",
							"console.log(RESP.salary[0])\r",
							"\r",
							"'10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.'\r",
							"console.log(RESP.salary[1])\r",
							"\r",
							"'11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.'\r",
							"console.log(RESP.salary[2])\r",
							"\r",
							"'12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)'\r",
							"'13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)'\r",
							"'14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)'\r",
							"//переводим данные в валиный тип для сравнения\r",
							"\r",
							"pm.test('Проверка элементов[0-2] массива salary (12, 13, 14)', () => {\r",
							"    pm.expect(RESP.salary[0]).to.eql(+(REQ.salary))\r",
							"    pm.expect(+(RESP.salary[1])).to.eql(+(REQ.salary)*2)\r",
							"    pm.expect(+(RESP.salary[2])).to.eql(+(REQ.salary)*3)\r",
							"})\r",
							"\r",
							"'18. Передать в окружение переменную name'\r",
							"'19. Передать в окружение переменную age'\r",
							"'20. Передать в окружение переменную salary'\r",
							"pm.environment.set(\"name\", \"Egor\")\r",
							"pm.environment.set(\"age\",\"29\")\r",
							"pm.environment.set(\"salary\", \"100000\")\r",
							"\r",
							"'21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.'\r",
							"let cikl = RESP.salary\r",
							"for (let i = 0; i < cikl.lenght; i++) {\r",
							"    console.log(cikl[i])\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ksendzov}}/object_info_4?name=Sergey&age=51&salary=60000",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Sergey"
						},
						{
							"key": "age",
							"value": "51"
						},
						{
							"key": "salary",
							"value": "60000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "7_POST_ep : /user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"'6. Спарсить response body в json.'\r",
							"RESP = pm.response.json()\r",
							"console.log(\"otvet = \", RESP)\r",
							"\r",
							"'7. Спарсить request.'\r",
							"REQ = request.data\r",
							"console.log(\"zapros = \", REQ)\r",
							"\r",
							"'8. Проверить, что json response имеет параметр start_qa_salary'\r",
							"'9. Проверить, что json response имеет параметр qa_salary_after_6_months'\r",
							"'10. Проверить, что json response имеет параметр qa_salary_after_12_months'\r",
							"'11. Проверить, что json response имеет параметр qa_salary_after_1.5_year'\r",
							"'12. Проверить, что json response имеет параметр qa_salary_after_3.5_years'\r",
							"'13. Проверить, что json response имеет параметр person'\r",
							"\r",
							"pm.test(\"Проверка на наличие параметров в теле ответа (8 - 13)\", () => {\r",
							"    pm.expect(RESP).to.have.property(\"start_qa_salary\")           //(8)\r",
							"    pm.expect(RESP).to.have.property(\"qa_salary_after_6_months\")  //(9)\r",
							"    pm.expect(RESP).to.have.property(\"qa_salary_after_12_months\") //(10)\r",
							"    pm.expect(RESP).to.have.property(\"qa_salary_after_1.5_year\")  //(11)\r",
							"    pm.expect(RESP).to.have.property('qa_salary_after_3.5_years') //(12)\r",
							"    pm.expect(RESP).to.have.property('person')                    //(13)\r",
							"})\r",
							"\r",
							"'14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)'\r",
							"'15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)'\r",
							"'16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)'\r",
							"'17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)'\r",
							"'18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)'\r",
							"pm.test(\"Проверка соответствия данных о зарплате в ответе и запросе (14-18)\", () => {\r",
							"    pm.expect(RESP.start_qa_salary).to.eql(+(REQ.salary))                  //14\r",
							"    pm.expect(RESP.qa_salary_after_6_months).to.eql(+(REQ.salary)*2)       //15\r",
							"    pm.expect(RESP.qa_salary_after_12_months).to.eql(+(REQ.salary)*2.7)    //16\r",
							"    pm.expect(RESP[\"qa_salary_after_1.5_year\"]).to.eql(+(REQ.salary)*3.3)  //17\r",
							"    pm.expect(RESP[\"qa_salary_after_3.5_years\"]).to.eql(+(REQ.salary)*3.8) //18\r",
							"})\r",
							"\r",
							"'19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)'\r",
							"'20. Проверить, что что параметр u_age равен age из request (age забрать из request.)'\r",
							"'21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)'\r",
							"\r",
							"pm.test(\"Проверка соответствия данных о жизни в ответе и запросе (19, 20, 21)\", () => {\r",
							"    pm.expect(RESP.person.u_name[1]).to.eql(+REQ.salary)                  //19\r",
							"    pm.expect(String(RESP.person.u_age)).to.eql(REQ.age)                  //20\r",
							"    pm.expect(RESP.person.u_salary_5_years).to.eql(+(REQ.salary)*4.2)     //21\r",
							"})\r",
							"\r",
							"'22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.'\r",
							"let cikl_persona = RESP.person\r",
							"for (let key in cikl_persona) {\r",
							"    console.log(key , cikl_persona[key])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{ksendzov}}/user_info_2",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "8_GET_ep: /first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let right_resp = \"This is the first responce from server!\";\r",
							"\r",
							"console.log(right_resp)\r",
							"\r",
							"\"3. Проверить, что в body приходит правильный string.\"\r",
							"pm.test('Respons согласно образцу', () => {\r",
							"    pm.expect(pm.response.text()).to.eql(right_resp);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ksendzov}}/first",
					"host": [
						"{{ksendzov}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		}
	]
}